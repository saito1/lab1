#!/usr/bin/env python3

# seu código aqui
import socket
import re
import sys
import queue
import select

def readline(socket):
	ret = ''
	while True:
		c = socket.recv(1)
		if c == b'\\':
			d = socket.recv(1)
			if d == b'n' or d == b'':
				break
			else:
				ret += str(d.decode("utf-8"))
				break
		elif c == b'\n':
			break
		elif c == b'':
			break			
		else:
			ret += str(c.decode("utf-8"))

	return ret

#Envia mensagem para todos os clientes
def envia_msg(lista_sockets, msg):
	for conexao in lista_sockets:
		print(conexao)
		conexao.send(msg)

#Função que valida o nick do usuario
def valida_nick(data, nick, c):
	aux = data.split(" ") #Separa a string recebida
	print(aux)
	aux.pop(0) #Remove o primeiro elemento ta lista, "/nick" ou "/rename"
	if len(aux) > 1 or ":" in data: #Caso o tamanho da lista seja maior que 1 significa que existem " " no nick
		c.send(b"/error\n")
	elif nick != "": #Se o nick seja diferente de "" significa que o usuario ja possui nick
		mensagem = "/renamed " + nick + " " + aux[0] + "\n"
		c.send(str.encode(mensagem))
		return aux[0]
	else:
		mensagem = "/joined " + aux[0] + "\n"
		c.send(str.encode(mensagem))
		return aux[0]
	
	return ""

if __name__ == "__main__":

	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	s.bind(('', 7000))
	s.listen(5)
	
	lista_nicks = []
	
	lista_tupla_nick_conexao = {}
	
	#Sockest que para a leitura
	inputs = [s]
	
	#Sockets para escrita
	#outputs = []
	
	
	while inputs:
	
		#Espera para que tenha pelo menos 1 socket pronto para ser processado
		print("Esperando o próximo evento")
		readable, writeable , _ = select.select(inputs, [], [])
		
		#Gerencia os inputs
		teste = readable
		for c in readable:
		
			if c is s:
				#Um socket para leitura está pronto para aceitar conexão
				conexao, endereco = c.accept()
				print('Connected by', endereco)
				#Adiciona o socket na lista de conexoes
				inputs.append(conexao)
				lista_tupla_nick_conexao[conexao] = ''
				
			else:
				data = readline(c)
				nick = lista_tupla_nick_conexao[c]
				if re.match("/nick ", data) and nick == "": #verifica se a string lida comeca com /nick
					nick = valida_nick(data, nick, c) #Se o usuario não tier um nick ainda
					lista_tupla_nick_conexao[c] = nick
				elif re.match("/rename ", data) and nick != "": #Verifica se a string lida comeca com /rename
					nick = valida_nick(data, nick, c) #Se o usuario ja tiver um nick
					lista_tupla_nick_conexao[c] = nick
				elif re.match("/nick ",data) and nick != "": #Caso o usuario ja tenha nick e tente criar oturo
					c.send(b"/error\n")
				elif nick != "": #Caso o usuario ja tenha nick toda mensagem será válida
					mensagem = nick + ": " + data + "\n"
					envia_msg(teste, str.encode(mensagem))
					print(readable)
					#c.send(str.encode(mensagem))
				else:
					c.send(b"/error\n")		
	s.close()
