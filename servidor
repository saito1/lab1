#!/usr/bin/env python3

# seu código aqui
import socket
import re

def readline(socket):
	ret = ''
	while True:
		c = conexao.recv(1)
		if c == b'\\':
			d = conexao.recv(1)
			if d == b'n' or d == b'':
				break
			else:
				ret += str(d.decode("utf-8"))
				break
		elif c == b'\n':
			break
		elif c == b'':
			break			
		else:
			ret += str(c.decode("utf-8"))

	return ret

#Função que valida o nick do usuario
def valida_nick(data, nick):
	aux = data.split(" ") #Separa a string recebida
	aux.pop(0) #Remove o primeiro elemento ta lista, "/nick" ou "/rename"
	if len(aux) > 1 or ":" in data: #Caso o tamanho da lista seja maior que 1 significa que existem " " no nick
		conexao.send(b"/error\n")
	elif nick != "": #Se o nick seja diferente de "" significa que o usuario ja possui nick
		mensagem = "/renamed " + nick + " " + aux[0] + "\n"
		conexao.send(str.encode(mensagem))
		return aux[0]
	else:
		mensagem = "/joined " + aux[0] + "\n"
		conexao.send(str.encode(mensagem))
		return aux[0]
	
	return ""

if __name__ == "__main__":

	nick = ""

	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	s.bind(('', 7000))
	s.listen(5)

	conexao, endereco = s.accept()

	print("Connected by", endereco)

	while True:	
		try:
			data = readline(s)
			if re.match("/nick ", data) and nick == "": #Verifica se a string lida comeca com /nick
				nick = valida_nick(data, nick)	#Se o usuario nao tiver um nick ainda
			elif re.match("/rename ", data) and nick != "": #Verifica se a string lida comeca com /rename
				nick = valida_nick(data, nick) #Se o usuario ja tiver um nick 
			elif re.match("/nick ", data) and nick != "": #Caso o usuario ja tenha nick e tente criar outro
				conexao.send(b"/error\n")
			elif nick != "": #Caso o usuario ja tenha nick toda mensagem sera válida
				mensagem = nick + ": " + data + "\n"
				conexao.send(str.encode(mensagem))
			else:
				conexao.send(b"/error\n")
		except:
			conexao.close()

	s.close()


